#
# Makefile for entire kernel
#
XDIR=/u/cs452/public/xdev
XBINDIR=$(XDIR)/bin
XLIBDIR1=$(XDIR)/arm-none-eabi/lib
XLIBDIR2=$(XDIR)/lib/gcc/arm-none-eabi/9.2.0/
CC = $(XBINDIR)/arm-none-eabi-gcc
AS = $(XBINDIR)/arm-none-eabi-as
LD = $(XBINDIR)/arm-none-eabi-ld

# -static: force static linking
# -e: set entry point
# -nmagic: no page alignment
# -T: use linker script
LDFLAGS = -static -e main -nmagic -T ../linker.ld -L lib -L ../inc -L $(XLIBDIR1) -L $(XLIBDIR2) -lc

# -g: include debug information for gdb
# -S: only compile and emit assembly
# -fPIC: emit position-independent code
# -Wall: report all warnings
# -mcpu=arm920t: generate code for the 920t architecture
# -msoft-float: no FP co-processor
CFLAGS = -std=gnu99 -g -S -fPIC -Wall -mcpu=arm920t -msoft-float -I. -I include -I arch -I kern -I lib -I task -I user -I user/library -I util -I comm -I misc -I test -I devices -I resource -I components -I application

OPTIMIZATION := $(if $(O),$(addprefix -O, $(O)),-O3)
CFLAGS += $(OPTIMIZATION)

CFILES := $(shell find . -name '*.c')

SFILES := $(patsubst %.s, %.o, $(shell find . -name '*.s'))

ASMFILES := $(patsubst %.c,%.s,$(CFILES))

OBJECTS := $(patsubst %.s, %.o, $(ASMFILES))

ELF := kernel.elf

all : $(ELF)
	echo $(CFILES)
	echo $(SFILES)
	cp build/$(ELF) /u/cs452/tftp/ARM/$(USER)
	chmod 777 /u/cs452/tftp/ARM/$(USER)/$(ELF)

$(ELF): $(OBJECTS) $(SFILES)
	cd build && $(LD) $(LDFLAGS) -o $@ *.o -lgcc -lc
	

$(OBJECTS): %.o : %.s
	$(AS) $(ASFLAGS) -o $(addprefix build/, $(notdir $@)) $(addprefix build/, $(notdir $<)) 

$(SFILES): %.o : %.s
	$(AS) $(ASFLAGS) -o   $(addprefix build/, $(notdir $@)) $<

$(ASMFILES): %.s : %.c
	$(CC) $(CFLAGS) $< -o $(addprefix build/, $(notdir $@))

dirs:
	mkdir build

clean:
	rm -rf build